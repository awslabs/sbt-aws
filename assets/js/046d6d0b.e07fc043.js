"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1],{4137:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorials/tutorial-basics/putting-it-all-together","title":"Putting it all together","description":"Now that we\'ve seen the various parts of the application plane in isolation, let\'s put it all together. Please create the following file in the /lib directory of your CDK app and name it app-plane.ts. Now open that file and paste the following contents into it:","source":"@site/docs/tutorials/tutorial-basics/putting-it-all-together.md","sourceDirName":"tutorials/tutorial-basics","slug":"/tutorials/tutorial-basics/putting-it-all-together","permalink":"/sbt-aws/docs/tutorials/tutorial-basics/putting-it-all-together","draft":false,"unlisted":false,"editUrl":"https://github.com/awslabs/sbt-aws/blob/main/website/docs/tutorials/tutorial-basics/putting-it-all-together.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Provisioning script breakdown","permalink":"/sbt-aws/docs/tutorials/tutorial-basics/provisioning-script-breakdown"},"next":{"title":"Testing the deployment","permalink":"/sbt-aws/docs/tutorials/tutorial-basics/test-the-deployment"}}');var o=n(4848),i=n(8453);const s={sidebar_position:8},r="Putting it all together",l={},c=[];function p(t){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"putting-it-all-together",children:"Putting it all together"})}),"\n",(0,o.jsx)(e.p,{children:"Now that we've seen the various parts of the application plane in isolation, let's put it all together. Please create the following file in the /lib directory of your CDK app and name it app-plane.ts. Now open that file and paste the following contents into it:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'import * as sbt from \'@cdklabs/sbt-aws\';\nimport * as cdk from \'aws-cdk-lib\';\nimport { EventBus } from \'aws-cdk-lib/aws-events\';\nimport { PolicyDocument, PolicyStatement, Effect } from \'aws-cdk-lib/aws-iam\';\n\nexport interface AppPlaneProps extends cdk.StackProps {\n  eventManager: sbt.IEventManager;\n}\nexport class AppPlaneStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: AppPlaneProps) {\n    super(scope, id, props);\n\n    const provisioningScriptJobProps: sbt.TenantLifecycleScriptJobProps = {\n      permissions: new PolicyDocument({\n        statements: [\n          new PolicyStatement({\n            actions: [\n              \'cloudformation:CreateStack\',\n              \'cloudformation:DescribeStacks\',\n              \'s3:CreateBucket\',\n            ],\n            resources: [\'*\'],\n            effect: Effect.ALLOW,\n          }),\n        ],\n      }),\n      script: `\necho "starting..."\n\n# note that this template.yaml is being created here, but\n# it could just as easily be pulled in from an S3 bucket.\ncat > template.json << EndOfMessage\n{\n  "AWSTemplateFormatVersion": "2010-09-09",\n  "Resources": { "MyBucket":{ "Type": "AWS::S3::Bucket" }},\n  "Outputs": { "S3Bucket": { "Value": { "Ref": "MyBucket" }}}\n}\nEndOfMessage\n\necho "tenantId: $tenantId"\necho "tier: $tier"\n\naws cloudformation create-stack --stack-name "tenantTemplateStack-\\${tenantId}"  --template-body "file://template.json"\naws cloudformation wait stack-create-complete --stack-name "tenantTemplateStack-\\${tenantId}"\nexport tenantS3Bucket=$(aws cloudformation describe-stacks --stack-name "tenantTemplateStack-\\${tenantId}" | jq -r \'.Stacks[0].Outputs[0].OutputValue\')\nexport someOtherVariable="this is a test"\necho $tenantS3Bucket\n\nexport tenantConfig=$(jq --arg SAAS_APP_USERPOOL_ID "MY_SAAS_APP_USERPOOL_ID" \\\n--arg SAAS_APP_CLIENT_ID "MY_SAAS_APP_CLIENT_ID" \\\n--arg API_GATEWAY_URL "MY_API_GATEWAY_URL" \\\n-n \'{"userPoolId":$SAAS_APP_USERPOOL_ID,"appClientId":$SAAS_APP_CLIENT_ID,"apiGatewayUrl":$API_GATEWAY_URL}\')\n\necho $tenantConfig\nexport tenantStatus="created"\n\necho "done!"\n`,\n      environmentStringVariablesFromIncomingEvent: [\'tenantId\', \'tier\'],\n      environmentVariablesToOutgoingEvent: [\n        \'tenantS3Bucket\',\n        \'someOtherVariable\',\n        \'tenantConfig\',\n        \'tenantStatus\',\n      ],\n      scriptEnvironmentVariables: {\n        TEST: \'test\',\n      },\n      eventManager: props.eventManager,\n    };\n\n    const provisioningJobScript: sbt.ProvisioningScriptJob = new sbt.ProvisioningScriptJob(\n      this,\n      \'provisioningJobScript\',\n      provisioningScriptJobProps\n    );\n\n    new sbt.CoreApplicationPlane(this, \'CoreApplicationPlane\', {\n      eventManager: eventManager,\n      scriptJobs: [provisioningJobScript],\n    });\n  }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"Although this looks like a lot of code, it's still very few constructs. Now that we've defined our app plane, let's again open up the hello-cdk.ts file in the bin directory of your CDK app. Once open, uncomment each commented line. The final file should look like this:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"#!/usr/bin/env node\nimport 'source-map-support/register';\nimport * as cdk from 'aws-cdk-lib';\nimport { ControlPlaneStack } from '../lib/control-plane';\nimport { AppPlaneStack } from '../lib/app-plane';\n\nconst app = new cdk.App();\nconst controlPlaneStack = new ControlPlaneStack(app, 'ControlPlaneStack');\nconst appPlaneStack = new AppPlaneStack(app, 'AppPlaneStack', {\n  eventManager: controlPlaneStack.eventManager,\n});\n"})}),"\n",(0,o.jsx)(e.p,{children:"Once done, ensure all files are saved, and let's deploy the solution again, but this time we'll include the application plane:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm run build\ncdk deploy ControlPlaneStack AppPlaneStack\n"})})]})}function u(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(p,{...t})}):p(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>r});var a=n(6540);const o={},i=a.createContext(o);function s(t){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:s(t.components),a.createElement(i.Provider,{value:e},t.children)}}}]);