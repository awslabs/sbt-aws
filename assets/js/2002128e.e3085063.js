"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[683],{5010:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"interfaces/billing-interface","title":"IBilling Interface","description":"Overview","source":"@site/docs/interfaces/billing-interface.md","sourceDirName":"interfaces","slug":"/interfaces/billing-interface","permalink":"/sbt-aws/docs/interfaces/billing-interface","draft":false,"unlisted":false,"editUrl":"https://github.com/awslabs/sbt-aws/blob/main/website/docs/interfaces/billing-interface.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"IBilling Interface"},"sidebar":"interfaces","previous":{"title":"IAuth Interface","permalink":"/sbt-aws/docs/interfaces/auth-interface"},"next":{"title":"IMetering Interface","permalink":"/sbt-aws/docs/interfaces/metering-interface"}}');var r=i(4848),o=i(8453);const l={sidebar_position:2,sidebar_label:"IBilling Interface"},s="IBilling Interface",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Properties",id:"properties",level:2},{value:"createCustomerFunction",id:"createcustomerfunction",level:3},{value:"deleteCustomerFunction",id:"deletecustomerfunction",level:3},{value:"createUserFunction",id:"createuserfunction",level:3},{value:"deleteUserFunction",id:"deleteuserfunction",level:3},{value:"ingestor",id:"ingestor",level:3},{value:"putUsageFunction",id:"putusagefunction",level:3},{value:"webhookFunction",id:"webhookfunction",level:3},{value:"Additional Interfaces",id:"additional-interfaces",level:2},{value:"IFunctionSchedule",id:"ifunctionschedule",level:3},{value:"IFunctionPath",id:"ifunctionpath",level:3},{value:"Usage",id:"usage",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ibilling-interface",children:"IBilling Interface"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The IBilling interface encapsulates the list of properties for a billing construct. It includes functions for customer and user management, data ingestion, and usage data handling. This interface is designed to provide a standardized way of handling billing-related operations in a cloud-native application."}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h3,{id:"createcustomerfunction",children:"createCustomerFunction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: IASyncFunction"}),"\n",(0,r.jsx)(n.li,{children:"Description: The async function responsible for creating a new customer. A customer in this context is an entity that can have zero or more users."}),"\n",(0,r.jsx)(n.li,{children:"Default Event Trigger: ONBOARDING_REQUEST"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deletecustomerfunction",children:"deleteCustomerFunction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: IASyncFunction"}),"\n",(0,r.jsx)(n.li,{children:"Description: The async function responsible for deleting an existing customer. A customer in this context is an entity that can have zero or more users."}),"\n",(0,r.jsx)(n.li,{children:"Default Event Trigger: OFFBOARDING_REQUEST"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"createuserfunction",children:"createUserFunction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: IASyncFunction (Optional)"}),"\n",(0,r.jsx)(n.li,{children:"Description: The async function responsible for creating a new user. A user in this context is an entity that belongs to a customer."}),"\n",(0,r.jsx)(n.li,{children:"Default Event Trigger: TENANT_USER_CREATED"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deleteuserfunction",children:"deleteUserFunction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: IASyncFunction (Optional)"}),"\n",(0,r.jsx)(n.li,{children:"Description: The async function responsible for deleting an existing user. A user in this context is an entity that belongs to a customer."}),"\n",(0,r.jsx)(n.li,{children:"Default Event Trigger: TENANT_USER_DELETED"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ingestor",children:"ingestor"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: IDataIngestorAggregator (Optional)"}),"\n",(0,r.jsx)(n.li,{children:"Description: The IDataIngestorAggregator responsible for accepting and aggregating raw billing data."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"putusagefunction",children:"putUsageFunction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: IFunctionSchedule (Optional)"}),"\n",(0,r.jsx)(n.li,{children:"Description: The async function responsible for taking the aggregated data and pushing it to the billing provider."}),"\n",(0,r.jsx)(n.li,{children:"Default Event Trigger: events.Schedule.rate(cdk.Duration.hours(24)) (Triggered every 24 hours)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"webhookfunction",children:"webhookFunction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Type: IFunctionPath (Optional)"}),"\n",(0,r.jsx)(n.li,{children:"Description: The function to trigger when a webhook request is received."}),"\n",(0,r.jsx)(n.li,{children:"Default HTTP Path: POST /billing/{$webhookPath}"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"additional-interfaces",children:"Additional Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"ifunctionschedule",children:"IFunctionSchedule"}),"\n",(0,r.jsx)(n.p,{children:"This interface allows specifying both the function to trigger and the schedule by which to trigger it."}),"\n",(0,r.jsx)(n.p,{children:"Properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"handler: The function definition (IFunction)."}),"\n",(0,r.jsx)(n.li,{children:"schedule: The schedule that will trigger the handler function (Schedule)."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ifunctionpath",children:"IFunctionPath"}),"\n",(0,r.jsx)(n.p,{children:"This interface allows specifying both the function to trigger and the path on the API Gateway that triggers it."}),"\n",(0,r.jsx)(n.p,{children:"Properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"path: The path to the webhook resource (string)."}),"\n",(0,r.jsx)(n.li,{children:"handler: The function definition (IFunction)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"To use the IBilling interface, you need to implement the required properties and pass them to the billing construct. Here's an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import { IBilling } from 'your-billing-interface';\n\nconst billing: IBilling = {\n  createCustomerFunction: /* Provide your implementation */,\n  deleteCustomerFunction: /* Provide your implementation */,\n  createUserFunction: /* Provide your implementation (optional) */,\n  deleteUserFunction: /* Provide your implementation (optional) */,\n  ingestor: /* Provide your implementation (optional) */,\n  putUsageFunction: /* Provide your implementation (optional) */,\n  webhookFunction: /* Provide your implementation (optional) */,\n};\n\n// Pass the `billing` object to your billing construct\nconst billingConstruct = new BillingConstruct(scope, 'BillingConstruct', billing);\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this example, you need to provide implementations for the required properties (createCustomerFunction and deleteCustomerFunction). The optional properties can be provided based on your specific requirements."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var t=i(6540);const r={},o=t.createContext(r);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);