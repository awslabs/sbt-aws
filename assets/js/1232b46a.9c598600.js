"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2912],{3469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorials/tutorial-basics/create-control-plane","title":"Create the control plane","description":"Now that we have SBT installed, let\'s create a new SBT control plane. Create a new file under /lib/control-plane.ts with the following contents.","source":"@site/docs/tutorials/tutorial-basics/create-control-plane.md","sourceDirName":"tutorials/tutorial-basics","slug":"/tutorials/tutorial-basics/create-control-plane","permalink":"/sbt-aws/docs/tutorials/tutorial-basics/create-control-plane","draft":false,"unlisted":false,"editUrl":"https://github.com/awslabs/sbt-aws/blob/main/website/docs/tutorials/tutorial-basics/create-control-plane.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Install the SaaS Builder Toolkit for AWS","permalink":"/sbt-aws/docs/tutorials/tutorial-basics/install-sbt"},"next":{"title":"Build the control plane","permalink":"/sbt-aws/docs/tutorials/tutorial-basics/build-it"}}');var a=n(4848),r=n(8453);const s={sidebar_position:3},i="Create the control plane",l={},c=[];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"create-the-control-plane",children:"Create the control plane"})}),"\n",(0,a.jsxs)(t.p,{children:["Now that we have SBT installed, let's create a new SBT control plane. Create a new file under ",(0,a.jsx)(t.code,{children:"/lib/control-plane.ts"})," with the following contents."]}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsx)(t.p,{children:"Please be sure to replace the email address with a real email as this is where you'll get the temporary admin password."})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"import * as sbt from '@cdklabs/sbt-aws';\nimport { Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\n\nexport class ControlPlaneStack extends Stack {\n  public readonly regApiGatewayUrl: string;\n  public readonly eventManager: sbt.IEventManager;\n\n  constructor(scope: Construct, id: string, props?: any) {\n    super(scope, id, props);\n    const cognitoAuth = new sbt.CognitoAuth(this, 'CognitoAuth', {\n      enableAdvancedSecurityMode: false, // only for testing purposes!\n      setAPIGWScopes: false, // only for testing purposes!\n    });\n\n    const controlPlane = new sbt.ControlPlane(this, 'ControlPlane', {\n      auth: cognitoAuth,\n      systemAdminEmail: 'ENTER YOUR EMAIL HERE',\n    });\n\n    this.eventManager = controlPlane.eventManager;\n    this.regApiGatewayUrl = controlPlane.controlPlaneAPIGatewayUrl;\n  }\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Notice here we're creating a new CDK Stack called \"ControlPlaneStack\". In that stack, we're creating a ",(0,a.jsx)(t.code,{children:"ControlPlane"})," construct which we imported from the ",(0,a.jsx)(t.code,{children:"@cdklabs/sbt-aws"})," package."]}),"\n",(0,a.jsxs)(t.p,{children:['Another important concept worth pointing out here is the plugability of this approach. Notice we\'re creating an "auth" component, called "CognitoAuth". This component implements the ',(0,a.jsx)(t.code,{children:"IAuth"})," interface defined in the SBT core package. We currently have a Cognito implementation of ",(0,a.jsx)(t.code,{children:"IAuth"}),", but we could technically implement that interface with any identity provider."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(6540);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);