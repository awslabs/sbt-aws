// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import * as codebuild from 'aws-cdk-lib/aws-codebuild';
import { EventField } from 'aws-cdk-lib/aws-events';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as kms from 'aws-cdk-lib/aws-kms';
import { NagSuppressions } from 'cdk-nag';
import { Construct } from 'constructs';

/**
 * Encapsulates the list of properties for a CodeBuildRunner.
 */
export interface CodebuildRunnerProps {
  /**
   * The name of the CodeBuildRunner. Note that this value must be unique.
   */
  readonly name: string;

  /**
   * The IAM permission document for the CodeBuildRunner.
   */
  readonly permissions: iam.PolicyDocument;

  /**
   * The bash script to run as part of the CodeBuildRunner.
   */
  readonly script: string;

  /**
   * The bash script to run after the main script has completed.
   */
  readonly postScript?: string;

  /**
   * The environment variables to import into the CodeBuildRunner from event details field.
   */
  readonly environmentVariablesFromIncomingEvent?: string[];

  /**
   * The environment variables to export into the outgoing event once the CodeBuildRunner has finished.
   */
  readonly environmentVariablesToOutgoingEvent?: string[];

  /**
   * The variables to pass into the codebuild CodeBuildRunner.
   */
  readonly scriptEnvironmentVariables?: {
    [key: string]: string;
  };
}

/**
 * Provides a job runner to execute arbitrary bash code.
 */
export class CodebuildRunner extends Construct {
  /**
   * The codebuildProject used to implement this CodeBuildRunner.
   * @attribute
   */
  public readonly codebuildProject: codebuild.Project;

  /**
   * The environment variables to export into the outgoing event once the CodeBuildRunner has finished.
   * @attribute
   */
  public readonly environmentVariablesToOutgoingEvent?: string[];

  constructor(scope: Construct, id: string, props: CodebuildRunnerProps) {
    super(scope, id);
    const environmentVariablesOverride: {
      name: string;
      value: string;
      type: codebuild.BuildEnvironmentVariableType;
    }[] = [];

    props.environmentVariablesFromIncomingEvent?.forEach((importedVariable: string) => {
      environmentVariablesOverride.push({
        name: importedVariable,
        value: EventField.fromPath(`$.detail.${importedVariable}`),
        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
      });
    });

    const environmentVariables: {
      [key: string]: codebuild.BuildEnvironmentVariable;
    } = {};

    if (props.scriptEnvironmentVariables) {
      for (const key in props.scriptEnvironmentVariables) {
        environmentVariables[key] = {
          value: props.scriptEnvironmentVariables[key],
          type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        };
      }
    }

    this.environmentVariablesToOutgoingEvent = props.environmentVariablesToOutgoingEvent;

    const codeBuildProjectEncryptionKey = new kms.Key(
      scope,
      `${props.name}-codeBuildProjectEncryptionKey`,
      {
        enableKeyRotation: true,
      }
    );

    this.codebuildProject = new codebuild.Project(scope, `${props.name}-codebuildProject`, {
      encryptionKey: codeBuildProjectEncryptionKey,
      environment: {
        buildImage: codebuild.LinuxBuildImage.AMAZON_LINUX_2_5,
        privileged: true,
        environmentVariables: environmentVariables,
      },
      buildSpec: codebuild.BuildSpec.fromObject({
        version: '0.2',
        env: {
          shell: 'bash',
          ...(props.environmentVariablesToOutgoingEvent && {
            'exported-variables': props.environmentVariablesToOutgoingEvent,
          }),
        },
        phases: {
          build: {
            commands: props.script,
          },
          post_build: {
            ...(props.postScript && { commands: props.postScript }),
          },
        },
      }),
    });

    NagSuppressions.addResourceSuppressions(this.codebuildProject, [
      {
        id: 'AwsSolutions-CB3',
        reason: 'Privileged mode grants access to docker daemon.',
      },
    ]);

    NagSuppressions.addResourceSuppressions(
      this.codebuildProject,
      [
        {
          id: 'AwsSolutions-IAM5',
          reason: 'Suppress errors generated by updates to cdk-managed CodeBuild Project role.',
          appliesTo: [
            'Action::kms:GenerateDataKey*',
            'Action::kms:ReEncrypt*',
            {
              regex: 'Resource::arn:aws:codebuild:(.*):(.*):report-group/(.*)$/g',
            },
            {
              regex: 'Resource::arn:aws:logs:(.*):(.*):log-group:/aws/codebuild/(.*):(.*)$/g',
            },
          ],
        },
      ],
      true // applyToChildren = true, so that it applies to the IAM resources created for the codebuild project.
    );

    this.codebuildProject.role?.addManagedPolicy(
      new iam.ManagedPolicy(scope, `${props.name}-codeBuildProvisionProjectRole`, {
        document: props.permissions,
      })
    );
  }
}
